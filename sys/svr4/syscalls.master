 $FreeBSD: src/sys/svr4/syscalls.master,v 1.6.2.2 2001/10/05 07:34:37 peter Exp $
;	from: @(#)syscalls.master	8.1 (Berkeley) 7/19/93
;
; System call name/number master file (or rather, slave, from SVR4).
; Processed to create svr4_sysent.c, svr4_syscalls.c and svr4_syscall.h.

; Columns: number type nargs namespc name alt{name,tag,rtyp}/comments
;	number	system call number, must be in order
;	type	one of STD, OBSOL, UNIMPL, COMPAT
;	namespc one of POSIX, BSD, STD, NOHIDE (I dont care :-) -Peter
;	name	psuedo-prototype of syscall routine
;		If one of the following alts is different, then all appear:
;	altname	name of system call if different
;	alttag	name of args struct tag if different from [o]`name'"_args"
;	altrtyp	return type if not int (bogus - syscalls always return int)
;		for UNIMPL/OBSOL, name continues with comments

; types:
;	STD	always included
;	COMPAT	included on COMPAT #ifdef
;	LIBCOMPAT included on COMPAT #ifdef, and placed in syscall.h
;	OBSOL	obsolete, not included in system, only specifies name
;	UNIMPL	not implemented, placeholder only

; #ifdef's, etc. may be included, and are copied to the output files.

#include <sys/types.h>
#include <sys/sysent.h>
#include <sys/sysproto.h>
#include <netinet/in.h>

#include <svr4/svr4.h>
#include <svr4/svr4_types.h>
#include <svr4/svr4_signal.h>
#include <svr4/svr4_proto.h>

0	UNIMPL	SVR4	unused
1	NOPROTO	POSIX	{ void sys_exit(int rval); } exit sys_exit_args void
2	NOPROTO	POSIX	{ int fork(void); }
3	NOPROTO	POSIX	{ int read(int fd, char *buf, u_int nbyte); }
4	NOPROTO	SVR4	{ int write(int fd, char *buf, u_int nbyte); }
5	STD	SVR4	{ int svr4_sys_open(char *path, int flags, int mode); }
6	NOPROTO	SVR4	{ int close(int fd); }
7	STD	SVR4	{ int svr4_sys_wait(int *status); }
8	STD	SVR4	{ int svr4_sys_creat(char *path, int mode); }
9	NOPROTO	SVR4	{ int link(char *path, char *link); }
10	NOPROTO	SVR4	{ int unlink(char *path); }
11	STD	SVR4	{ int svr4_sys_execv(char *path, char **argp); }
12	NOPROTO	SVR4	{ int chdir(char *path); }
13	STD	SVR4	{ int svr4_sys_time(time_t *t); }
14	STD	SVR4	{ int svr4_sys_mknod(char* path, int mode, int dev); }
15	NOPROTO	SVR4	{ int chmod(char *path, int mode); }
16	NOPROTO	SVR4	{ int chown(char *path, uid_t uid, gid_t gid); }
17	STD	SVR4	{ int svr4_sys_break(caddr_t nsize); }
18	STD	SVR4	{ int svr4_sys_stat(char* path, \
				struct svr4_stat* ub); }
19	NOPROTO	SVR4	{ int lseek(int filedes, off_t *offset, int whence); }
20	NOPROTO	SVR4	{ pid_t getpid(void); }
21	UNIMPL	SVR4	old_mount
22	UNIMPL	SVR4	sysv_umount
23	NOPROTO	SVR4	{ int setuid(uid_t uid); }
24	NOPROTO	SVR4	{ uid_t getuid(void); }
25	UNIMPL	SVR4	stime
26	UNIMPL	SVR4	ptrace
27	STD	SVR4	{ int svr4_sys_alarm(unsigned sec); }
28	STD	SVR4	{ int svr4_sys_fstat(int fd, struct svr4_stat *sb); }
29	STD	SVR4	{ int svr4_sys_pause(void); }
30	STD	SVR4	{ int svr4_sys_utime(char *path, \
				struct svr4_utimbuf *ubuf); }
31	UNIMPL	SVR4	stty
32	UNIMPL	SVR4	gtty
33	STD	SVR4	{ int svr4_sys_access(char *path, int flags); }
34	STD	SVR4	{ int svr4_sys_nice(int prio); }
35	UNIMPL	SVR4	statfs
36	NOPROTO	SVR4	{ int sync(void); }
37	STD	SVR4	{ int svr4_sys_kill(int pid, int signum); }
38	UNIMPL	SVR4	fstatfs
39	STD	SVR4	{ int svr4_sys_pgrpsys(int cmd, int pid, int pgid); }
40	UNIMPL	SVR4	xenix
41	NOPROTO	SVR4	{ int dup(u_int fd); }
42	NOPROTO	SVR4	{ int pipe(void); }
43	STD	SVR4	{ int svr4_sys_times(struct tms *tp); }
44	UNIMPL	SVR4	profil
45	UNIMPL	SVR4	plock
46	NOPROTO	SVR4	{ int setgid(gid_t gid); }
47	NOPROTO	SVR4	{ gid_t getgid(void); }
48	STD	SVR4	{ int svr4_sys_signal(int signum, \
				svr4_sig_t handler); }
#if defined(NOTYET)
49	STD	SVR4	{ int svr4_sys_msgsys(int what, int a2, int a3, \
				int a4, int a5); }
#else
49	UNIMPL	SVR4	msgsys
#endif
50	STD	SVR4	{ int svr4_sys_sysarch(int op, void *a1); }
51	UNIMPL	SVR4	acct
52	UNIMPL	SVR4	shmsys
53	UNIMPL	SVR4	semsys
54	STD	SVR4	{ int svr4_sys_ioctl(int fd, u_long com, \
				caddr_t data); }
55	UNIMPL	SVR4	uadmin
56	UNIMPL	SVR4	exch
57	STD	SVR4	{ int svr4_sys_utssys(void *a1, void *a2, int sel, \
				void *a3); }
58	NOPROTO	SVR4	{ int fsync(int fd); }
59	STD	SVR4	{ int svr4_sys_execve(char *path, char **argp, \
				char **envp); }
60	NOPROTO	SVR4	{ int umask(int newmask); }
61	NOPROTO	SVR4	{ int chroot(char *path); }
62	STD	SVR4	{ int svr4_sys_fcntl(int fd, int cmd, char *arg); }
63	STD	SVR4	{ int svr4_sys_ulimit(int cmd, long newlimit); }
64	UNIMPL	SVR4	reserved
65	UNIMPL	SVR4	reserved
66	UNIMPL	SVR4	reserved
67	UNIMPL	SVR4	reserved
68	UNIMPL	SVR4	reserved
69	UNIMPL	SVR4	reserved
70	UNIMPL	SVR4	advfs
71	UNIMPL	SVR4	unadvfs
72	UNIMPL	SVR4	rmount
73	UNIMPL	SVR4	rumount
74	UNIMPL	SVR4	rfstart
75	UNIMPL	SVR4	sigret
76	UNIMPL	SVR4	rdebug
77	UNIMPL	SVR4	rfstop
78	UNIMPL	SVR4	rfsys
79	NOPROTO	SVR4	{ int rmdir(char *path); }
80	NOPROTO	SVR4	{ int mkdir(char *path, int mode); }
81	STD	SVR4	{ int svr4_sys_getdents(int fd, char *buf, \
				int nbytes); }
82	UNIMPL	SVR4	libattach
83	UNIMPL	SVR4	libdetach
84	UNIMPL	SVR4	sysfs
85	STD	SVR4	{ int svr4_sys_getmsg(int fd, struct svr4_strbuf *ctl, \
				struct svr4_strbuf *dat, int *flags); }
86	STD	SVR4	{ int svr4_sys_putmsg(int fd, struct svr4_strbuf *ctl, \
				struct svr4_strbuf *dat, int flags); }
87	STD	SVR4	{ int svr4_sys_poll(struct pollfd *fds, unsigned int nfds, \
				int timeout); }
88	STD	SVR4	{ int svr4_sys_lstat(char *path, \
				struct svr4_stat *ub); }
89	NOPROTO	SVR4	{ int symlink(char *path, char *link); }
90	NOPROTO	SVR4	{ int readlink(char *path, char *buf, int count); }
91	NOPROTO	SVR4	{ int getgroups(u_int gidsetsize, gid_t *gidset); }
92	NOPROTO	SVR4	{ int setgroups(u_int gidsetsize, gid_t *gidset); }
93	NOPROTO	SVR4	{ int fchmod(int fd, int mode); }
94	NOPROTO	SVR4	{ int fchown(int fd, int uid, int gid); }
95	STD	SVR4	{ int svr4_sys_sigprocmask(int how, \
			    svr4_sigset_t *set, svr4_sigset_t *oset); }
96	STD	SVR4	{ int svr4_sys_sigsuspend(svr4_sigset_t *ss); }
97	STD	SVR4	{ int svr4_sys_sigaltstack( \
				struct svr4_sigaltstack *nss, \
				struct svr4_sigaltstack *oss); }
98	STD	SVR4	{ int svr4_sys_sigaction(int signum, \
			    struct svr4_sigaction *nsa, \
			    struct svr4_sigaction *osa); }
99	STD	SVR4	{ int svr4_sys_sigpending(int what, \
			    svr4_sigset_t *mask); }
100	STD	SVR4	{ int svr4_sys_context(int func, \
			    struct svr4_ucontext *uc); }
101	UNIMPL	SVR4	evsys
102	UNIMPL	SVR4	evtrapret
103	STD	SVR4	{ int svr4_sys_statvfs(char *path, \
				struct svr4_statvfs *fs); }
104	STD	SVR4	{ int svr4_sys_fstatvfs(int fd, \
				struct svr4_statvfs *fs); }
105	UNIMPL	SVR4	whoknows
106	UNIMPL	SVR4	nfssvc
107	STD	SVR4	{ int svr4_sys_waitsys(int grp, int id, \
				union svr4_siginfo *info, int options); }
108	UNIMPL	SVR4	sigsendsys
109	STD	SVR4	{ int svr4_sys_hrtsys(int cmd, int fun, int sub, \
				void *rv1, void *rv2); }
110	UNIMPL	SVR4	acancel
111	UNIMPL	SVR4	async
112	UNIMPL	SVR4	priocntlsys
113	STD	SVR4	{ int svr4_sys_pathconf(char *path, int name); }
114	UNIMPL	SVR4	mincore
115	STD	SVR4	{ caddr_t svr4_sys_mmap( caddr_t addr, svr4_size_t len, \
				int prot, int flags, int fd, svr4_off_t pos); }
116	NOPROTO	SVR4	{ int mprotect(void *addr, int len, int prot); }
117	NOPROTO	SVR4	{ int munmap(void *addr, int len); }
118	STD	SVR4	{ int svr4_sys_fpathconf(int fd, int name); }
119	NOPROTO	SVR4	{ int vfork(void); }
120	NOPROTO	SVR4	{ int fchdir(int fd); }
121	NOPROTO	SVR4	{ int readv(int fd, struct iovec *iovp, \
				u_int iovcnt); }
122	NOPROTO	SVR4	{ int writev(int fd, struct iovec *iovp, \
				u_int iovcnt); }
123	STD	SVR4	{ int svr4_sys_xstat(int two, char *path, \
			    struct svr4_xstat *ub); }
124	STD	SVR4	{ int svr4_sys_lxstat(int two, char *path, \
				struct svr4_xstat *ub); }
125	STD	SVR4	{ int svr4_sys_fxstat(int two, int fd, \
				struct svr4_xstat *sb); }
126	STD	SVR4	{ int svr4_sys_xmknod(int two, char *path, \
				svr4_mode_t mode, svr4_dev_t dev); }
127	UNIMPL	SVR4	clocal
128	STD	SVR4	{ int svr4_sys_setrlimit(int which, \
				const struct svr4_rlimit *rlp); }
129	STD	SVR4	{ int svr4_sys_getrlimit(int which, \
				struct svr4_rlimit *rlp); }
130	NOPROTO	SVR4	{ int lchown(char *path, uid_t uid, gid_t gid); }
131	STD	SVR4	{ int svr4_sys_memcntl(void * addr, \
				svr4_size_t len, int cmd, void * arg, \
				int attr, int mask); }
132	UNIMPL	SVR4	getpmsg
133	UNIMPL	SVR4	putpmsg
134	NOPROTO	SVR4	{ int rename(char *from, char *to); }
135	STD	SVR4	{ int svr4_sys_uname(struct svr4_utsname* name, \
				int dummy); }
136	NOPROTO	SVR4	{ int setegid(gid_t egid); }
137	STD	SVR4	{ int svr4_sys_sysconfig(int name); }
138	NOPROTO	SVR4	{ int adjtime(struct timeval *delta, \
				struct timeval *olddelta); }
139	STD	SVR4	{ long svr4_sys_systeminfo(int what, char *buf, \
				long len); }
140	UNIMPL	SVR4	notused
141	NOPROTO	SVR4	{ int seteuid(uid_t euid); }
142	UNIMPL	SVR4	vtrace
; fork1
143	UNIMPL SVR4	{ int fork(void); } 
144	UNIMPL	SVR4	sigtimedwait
145	UNIMPL	SVR4	lwp_info
146	UNIMPL	SVR4	yield
147	UNIMPL	SVR4	lwp_sema_wait
148	UNIMPL	SVR4	lwp_sema_post
149	UNIMPL	SVR4	lwp_sema_trywait
150	UNIMPL	SVR4	notused
151	UNIMPL	SVR4	notused
152	UNIMPL	SVR4	modctl
153	STD	SVR4	{ int svr4_sys_fchroot(int fd); }
154	STD	SVR4	{ int svr4_sys_utimes(char *path, \
				struct timeval *tptr); }
155	STD	SVR4	{ int svr4_sys_vhangup(void); }
156	STD	SVR4	{ int svr4_sys_gettimeofday(struct timeval *tp); }
157	NOPROTO	SVR4	{ int getitimer(u_int which, struct itimerval *itv); }
158	NOPROTO	SVR4	{ int setitimer(u_int which, struct itimerval *itv, \
					struct itimerval *oitv); }
159	UNIMPL	SVR4	lwp_create
160	UNIMPL	SVR4	lwp_exit
161	UNIMPL	SVR4	lwp_suspend
162	UNIMPL	SVR4	lwp_continue
163	UNIMPL	SVR4	lwp_kill
164	UNIMPL	SVR4	lwp_self
165	UNIMPL	SVR4	lwp_getprivate
166	UNIMPL	SVR4	lwp_setprivate
167	UNIMPL	SVR4	lwp_wait
168	UNIMPL	SVR4	lwp_mutex_unlock
169	UNIMPL	SVR4	lwp_mutex_lock
170	UNIMPL	SVR4	lwp_cond_wait
171	UNIMPL	SVR4	lwp_cond_signal
172	UNIMPL	SVR4	lwp_cond_broadcast
173	UNIMPL	SVR4	{ ssize_t svr4_sys_pread(int fd, void *buf, \
				size_t nbyte, svr4_off_t off); }
174	UNIMPL	SVR4	{ ssize_t svr4_sys_pwrite(int fd, const void *buf, \
				size_t nbyte, svr4_off_t off); }
175	STD	SVR4	{ svr4_off64_t svr4_sys_llseek(int fd, long offset1, \
				long offset2, int whence); }
176	UNIMPL	SVR4	inst_sync
177	UNIMPL	SVR4	whoknows
178	UNIMPL	SVR4	kaio
179	UNIMPL	SVR4	whoknows
180	UNIMPL	SVR4	whoknows
181	UNIMPL	SVR4	whoknows
182	UNIMPL	SVR4	whoknows
183	UNIMPL	SVR4	whoknows
184	UNIMPL	SVR4	tsolsys
185	STD	SVR4	{ int svr4_sys_acl(char *path, int cmd, int num, \
			    struct svr4_aclent *buf); }
186	STD	SVR4	{ int svr4_sys_auditsys(int code, int a1, int a2, \
				int a3, int a4, int a5); }
187	UNIMPL	SVR4	processor_bind
188	UNIMPL	SVR4	processor_info
189	UNIMPL	SVR4	p_online
190	UNIMPL	SVR4	sigqueue
191	UNIMPL	SVR4	clock_gettime
192	UNIMPL	SVR4	clock_settime
193	UNIMPL	SVR4	clock_getres
194	UNIMPL	SVR4	timer_create
195	UNIMPL	SVR4	timer_delete
196	UNIMPL	SVR4	timer_settime
197	UNIMPL	SVR4	timer_gettime
198	UNIMPL	SVR4	timer_overrun
199	NOPROTO	SVR4	{ int nanosleep(const struct timespec *rqtp, \
				struct timespec *rmtp); }
200	STD	SVR4	{ int svr4_sys_facl(int fd, int cmd, int num, \
			    struct svr4_aclent *buf); }
201	UNIMPL	SVR4	door
202	NOPROTO	SVR4	{ int setreuid(int ruid, int euid); }
203	NOPROTO	SVR4	{ int setregid(int rgid, int egid); }
204	UNIMPL	SVR4	install_utrap
205	UNIMPL	SVR4	signotify
206	UNIMPL	SVR4	schedctl
207	UNIMPL	SVR4	pset
208	UNIMPL	SVR4	whoknows
209	STD	SVR4	{ int svr4_sys_resolvepath(const char *path, \
				char *buf, size_t bufsiz); }
210	UNIMPL	SVR4	signotifywait
211	UNIMPL	SVR4	lwp_sigredirect
212	UNIMPL	SVR4	lwp_alarm
213	STD	SVR4	{ int svr4_sys_getdents64(int fd, \
				struct svr4_dirent64 *dp, \
				int nbytes); }
;213	UNIMPL	SVR4	getdents64
214	STD	SVR4	{ caddr_t svr4_sys_mmap64(void *addr, \
				svr4_size_t len, int prot, int flags, int fd, \
				svr4_off64_t pos); }
215	STD	SVR4	{ int svr4_sys_stat64(char *path, \
				struct svr4_stat64 *sb); }
216	STD	SVR4	{ int svr4_sys_lstat64(char *path, \
				struct svr4_stat64 *sb); }
217	STD	SVR4	{ int svr4_sys_fstat64(int fd, \
				struct svr4_stat64 *sb); }
218	STD	SVR4	{ int svr4_sys_statvfs64(char *path, \
				struct svr4_statvfs64 *fs); }
219	STD	SVR4	{ int svr4_sys_fstatvfs64(int fd, \
				struct svr4_statvfs64 *fs); }
220	STD	SVR4	{ int svr4_sys_setrlimit64(int which, \
				const struct svr4_rlimit64 *rlp); }
221	STD	SVR4	{ int svr4_sys_getrlimit64(int which, \
				struct svr4_rlimit64 *rlp); }
222	UNIMPL	SVR4	pread64
223	UNIMPL	SVR4	pwrite64
224	STD	SVR4	{ int svr4_sys_creat64(char *path, int mode); }
225	STD	SVR4	{ int svr4_sys_open64(char *path, int flags, \
				int mode); }
226	UNIMPL	SVR4	rpcsys
227	UNIMPL	SVR4	whoknows
228	UNIMPL	SVR4	whoknows
229	UNIMPL	SVR4	whoknows
230	STD	SVR4	{ int svr4_sys_socket(int domain, int type, \
				int protocol); }
231	NOPROTO	SVR4	{ int socketpair(int domain, int type, \
				int protocol, int *rsv); }
232	NOPROTO	SVR4	{ int bind(int s, const struct sockaddr *name, \
				int namelen); }
233	NOPROTO	SVR4	{ int listen(int s, int backlog); }
234	NOPROTO	SVR4	{ int accept(int s, struct sockaddr *name, \
				int *anamelen); }
235	NOPROTO	SVR4	{ int connect(int s, const struct sockaddr *name, \
				int namelen); }
236	NOPROTO	SVR4	{ int shutdown(int s, int how); }
237	STD	SVR4	{ int svr4_sys_recv(int s, caddr_t buf, int len, int flags); }
238	NOPROTO	SVR4	{ ssize_t recvfrom(int s, void *buf, size_t len, \
				int flags, struct sockaddr *from, \
				int *fromlenaddr); }
239	NOPROTO	SVR4	{ ssize_t recvmsg(int s, struct msghdr *msg, \
				int flags); }
240	STD	SVR4	{ int svr4_sys_send(int s, caddr_t buf, int len, int flags); }
241	NOPROTO	SVR4	{ ssize_t sendmsg(int s, const struct msghdr *msg, \
				int flags); }
242	STD	SVR4	{ ssize_t svr4_sys_sendto(int s, void *buf, \
				size_t len, int flags, \
				struct sockaddr *to, int tolen); }
243	NOPROTO	SVR4	{ int getpeername(int fdes, struct sockaddr *asa, \
				int *alen); }
244	NOPROTO	SVR4	{ int getsockname(int fdes, struct sockaddr *asa, \
				int *alen); }
245	NOPROTO	SVR4	{ int getsockopt(int s, int level, int name, \
				void *val, int *avalsize); }
246	NOPROTO	SVR4	{ int setsockopt(int s, int level, int name, \
				const void *val, int valsize); }
247	UNIMPL	SVR4	sockconfig
248	UNIMPL	SVR4	{ int ntp_gettime(struct ntptimeval *ntvp); }
249	UNIMPL	SVR4	{ int ntp_adjtime(struct timex *tp); }
